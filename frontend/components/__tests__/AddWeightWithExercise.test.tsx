//Test is generated by DeepSeek
import React from 'react';
import { render, fireEvent, act } from '@testing-library/react-native';
import { AddWorkoutScreen } from '@/app/screens/workout/AddWorkoutScreen';
import { WorkoutContext } from '@/context/WorkoutContext';
import { GlobalContext } from '@/context/GlobalContext';

// Simplified context mocks matching the reference test style
const mockWorkoutContext = {
  modalObject: { id: '-1', isVisible: true },
  setVisible: jest.fn(),
  setModalObject: jest.fn(),
  timeRanges: {},
  setTimeRanges: jest.fn(),
};

const mockGlobalContext = {
  isDarkMode: false,
  data: { token: 'mock-token' },
  toggleTheme: jest.fn(),
};

describe('AddWorkoutScreen Weight Input', () => {
  it('allows weight input for each set', async () => {
    const { getByText, getAllByTestId } = render(
      <WorkoutContext.Provider value={mockWorkoutContext}>
        <GlobalContext.Provider value={mockGlobalContext}>
          <AddWorkoutScreen />
        </GlobalContext.Provider>
      </WorkoutContext.Provider>
    );

    // Test initial set
    const initialWeightInputs = getAllByTestId('weight-input');
    expect(initialWeightInputs.length).toBe(1);

    // Test input functionality
    fireEvent.changeText(initialWeightInputs[0], '135');
    expect(initialWeightInputs[0].props.value).toBe('135');

    // Add new sets
    const addSetButton = getByText('Add Set');
    
    await act(async () => {
      fireEvent.press(addSetButton);
      fireEvent.press(addSetButton);
    });

    // Verify multiple inputs
    const updatedWeightInputs = getAllByTestId('weight-input');
    expect(updatedWeightInputs.length).toBe(3);

    // Test input across multiple sets
    fireEvent.changeText(updatedWeightInputs[1], '155');
    fireEvent.changeText(updatedWeightInputs[2], '175');
    
    expect(updatedWeightInputs[1].props.value).toBe('155');
    expect(updatedWeightInputs[2].props.value).toBe('175');
  });
});